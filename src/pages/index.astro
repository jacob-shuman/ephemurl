---
import { AstroFont } from "astro-font";
import { join } from "node:path";
import { Icon } from "astro-icon/components";
import tw from "clsx";
import Card from "../components/card.svelte";
import { games, modules, tools } from "../constants";
import packageJson from "../../package.json";
// import { db } from "../db";

// const {} = db();

let theme = Astro.url.searchParams.get("theme") ?? "system";
---

<html
  lang="en"
  class={(theme === "dark" ? "dark" : "") +
    " transition-all duration-300 ease-in-out"}
>
  <meta charset="utf-8" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <meta name="viewport" content="width=device-width" />
  <meta name="generator" content={Astro.generator} />
  <meta name="description" content={packageJson.description} />
  <title>ephemurl</title>

  <AstroFont
    config={[
      {
        name: "Rubik Mono One",
        src: [
          {
            weight: "400",
            style: "normal",
            path: join(
              process.cwd(),
              "public",
              "fonts",
              "rubik-mono",
              "RubikMonoOne-Regular.ttf"
            ),
          },
        ],
        preload: true,
        display: "swap",
        selector: "body",
        fallback: "sans-serif",
      },
      {
        name: "Rubik",
        src: [
          {
            style: "normal",
            path: join(
              process.cwd(),
              "public",
              "fonts",
              "rubik",
              "Rubik-VariableFont_wght.ttf"
            ),
          },
          {
            style: "italic",
            path: join(
              process.cwd(),
              "public",
              "fonts",
              "rubik",
              "Rubik-Italic-VariableFont_wght.ttf"
            ),
          },
        ],
        preload: true,
        display: "swap",
        selector: "body",
        fallback: "sans-serif",
      },
    ]}
  />

  <script type="module">
    let theme = "system";

    function refreshTheme() {
      if (
        theme === "dark" ||
        (theme === "system" &&
          window.matchMedia("(prefers-color-scheme: dark)").matches)
      ) {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }
    }

    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", (e) => refreshTheme());

    refreshTheme();
  </script>

  <body
    class="font-rubik p-4 sm:p-8 lg:p-12 bg-white text-black dark:bg-black dark:text-white flex flex-col gap-y-9 transition-all duration-300 ease-in-out"
  >
    <nav class="flex justify-between">
      <div class="flex flex-col">
        <h1 class="font-rubik-mono text-4xl">EPHEMURL</h1>
        <h2 class="text-xl">: something that lasts for a very short time</h2>
      </div>

      <!-- TODO: implement theme selector -->
      <!-- <div class="flex gap-x-3">
        <NavButton />
      </div> -->
    </nav>

    <section class="flex flex-col gap-y-3">
      <h3
        class={tw(
          "font-bold text-lg",
          tools.filter(({ status }) => status === "ready").length < 1 &&
            "opacity-40"
        )}
      >
        TOOLS
      </h3>

      <div class="flex flex-wrap gap-8">
        {
          tools
            .sort((t1, t2) => t1.name.localeCompare(t2.name))
            .sort(
              (t1, t2) =>
                Number(t2.status === "ready") - Number(t1.status === "ready")
            )
            .map(({ icon, ...t }) => (
              <Card {...t} client:idle>
                <Icon
                  slot="icon"
                  name={icon}
                  class={tw(
                    "w-12 h-12",
                    t.status === "ready" &&
                      "group-hover:text-tinge group-hover:dark:text-bauhaus"
                  )}
                />

                <Icon
                  slot="url-icon"
                  name="tabler:link"
                  class="min-w-min w-4 h-4"
                />

                <Icon
                  slot="vcs-icon"
                  name="tabler:brand-github"
                  class="min-w-min w-4 h-4"
                />
              </Card>
            ))
        }
      </div>
    </section>

    <section class="flex flex-col gap-y-3">
      <h3
        class={tw(
          "font-bold text-lg",
          games.filter(({ status }) => status === "ready").length < 1 &&
            "opacity-40"
        )}
      >
        GAMES
      </h3>

      <div class="flex flex-wrap gap-8">
        {
          games
            .sort((g1, g2) => g1.name.localeCompare(g2.name))
            .sort(
              (g1, g2) =>
                Number(g2.status === "ready") - Number(g1.status === "ready")
            )
            .map(({ icon, ...g }) => (
              <Card {...g} client:idle>
                <Icon
                  slot="icon"
                  name={icon}
                  class={tw(
                    "w-12 h-12",
                    g.status === "ready" &&
                      "group-hover:text-tinge group-hover:dark:text-bauhaus"
                  )}
                />

                <Icon
                  slot="url-icon"
                  name="tabler:link"
                  class="min-w-min w-4 h-4"
                />

                <Icon
                  slot="vcs-icon"
                  name="tabler:brand-github"
                  class="min-w-min w-4 h-4"
                />
              </Card>
            ))
        }
      </div>
    </section>

    <section class="flex flex-col gap-y-3">
      <h3
        class={tw(
          "font-bold text-lg",
          modules.filter(({ status }) => status === "ready").length < 1 &&
            "opacity-40"
        )}
      >
        MODULES
      </h3>

      <div class="flex flex-wrap gap-8">
        {
          modules
            .sort((m1, m2) => m1.name.localeCompare(m2.name))
            .sort(
              (m1, m2) =>
                Number(m2.status === "ready") - Number(m1.status === "ready")
            )
            .map(({ icon, ...m }) => (
              <Card {...m} client:load>
                <Icon
                  slot="icon"
                  name={icon}
                  class={tw(
                    "w-12 h-12",
                    m.status === "ready" &&
                      "group-hover:text-tinge group-hover:dark:text-bauhaus"
                  )}
                />

                <Icon
                  slot="url-icon"
                  name="tabler:link"
                  class="min-h-[1rem] min-w-[1rem] w-4 h-4"
                />

                <Icon
                  slot="vcs-icon"
                  name="tabler:brand-github"
                  class="min-w-min w-4 h-4"
                />
              </Card>
            ))
        }
      </div>
    </section>
  </body>
</html>
